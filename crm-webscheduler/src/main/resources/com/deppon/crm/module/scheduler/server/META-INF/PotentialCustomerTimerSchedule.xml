<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee 
			http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!-- 散客系统删除定时器——任务定义 -->
	<bean id="deleteScatterCustomerJob" class="com.deppon.foss.framework.server.components.scheduling.LocalJobDetail">
		<!-- repeate属性表示该任务执行时再次被触发是否可以再次执行 -->
		<property name="repeate" value="false"></property>
		<!-- multiNodeExecute属性表示该任务是否可以同时在多个节点执行 -->
		<property name="multiNodeExecute" value="false"></property>
		<!-- JobClass统一使用CommonJob -->
		<property name="jobClass" value="com.deppon.foss.framework.server.components.scheduling.CommonJob"></property>
		<property name="jobDataAsMap">
			<map>
				<!-- 任务中需要调用的服务类 -->
				<entry key="serviceBean" value-ref="timerPotentialCustomer"></entry>
				<!-- 任务中需要调用的服务方法 -->
				<entry key="methodName" value="deleteScatterCustomer"></entry>
			</map>
		</property>
	</bean>
	<!-- 触发器，定义job触发的时间，还可以配置CronTriggerBean -->
	<bean id="deleteScatterCustomerTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="deleteScatterCustomerJob" />
		<property name="cronExpression">
			<value>0 0 0 1 * ?</value>
		</property>
	</bean>

	<!-- 散客失效定时器——任务定义 -->
	<bean id="loseScatterCustomerJob" class="com.deppon.foss.framework.server.components.scheduling.LocalJobDetail">
		<!-- repeate属性表示该任务执行时再次被触发是否可以再次执行 -->
		<property name="repeate" value="false"></property>
		<!-- multiNodeExecute属性表示该任务是否可以同时在多个节点执行 -->
		<property name="multiNodeExecute" value="false"></property>
		<!-- JobClass统一使用CommonJob -->
		<property name="jobClass" value="com.deppon.foss.framework.server.components.scheduling.CommonJob"></property>
		<property name="jobDataAsMap">
			<map>
				<!-- 任务中需要调用的服务类 -->
				<entry key="serviceBean" value-ref="timerPotentialCustomer"></entry>
				<!-- 任务中需要调用的服务方法 -->
				<entry key="methodName" value="loseScatterCustomer"></entry>
			</map>
		</property>
	</bean>
	<!-- 触发器，定义job触发的时间，还可以配置CronTriggerBean -->
	<bean id="loseScatterCustomerTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="loseScatterCustomerJob" />
		<property name="cronExpression">
			<value>0 0 0 1 * ?</value>
		</property>
	</bean>

	<!-- 系统删除潜客——任务定义 -->
	<bean id="timerPotentialCustomerLoseIsOneYearJob" class="com.deppon.foss.framework.server.components.scheduling.LocalJobDetail">
		<!-- repeate属性表示该任务执行时再次被触发是否可以再次执行 -->
		<property name="repeate" value="false"></property>
		<!-- multiNodeExecute属性表示该任务是否可以同时在多个节点执行 -->
		<property name="multiNodeExecute" value="false"></property>
		<!-- JobClass统一使用CommonJob -->
		<property name="jobClass" value="com.deppon.foss.framework.server.components.scheduling.CommonJob"></property>
		<property name="jobDataAsMap">
			<map>
				<!-- 任务中需要调用的服务类 -->
				<entry key="serviceBean" value-ref="timerPotentialCustomer"></entry>
				<!-- 任务中需要调用的服务方法 -->
				<entry key="methodName" value="timerPotentialCustomerLoseIsOneYear"></entry>
			</map>
		</property>
	</bean>
	<!-- 触发器，定义job触发的时间，还可以配置CronTriggerBean -->
	<bean id="timerPotentialCustomerLoseIsOneYearTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="timerPotentialCustomerLoseIsOneYearJob" />
		<property name="cronExpression">
			<value>0 0 0 1 * ?</value>
		</property>
	</bean>

	<!-- 潜客系统失效——任务定义 -->
	<bean id="timeNotDevpPlanAndSysmakeIsLoseJob" class="com.deppon.foss.framework.server.components.scheduling.LocalJobDetail">
		<!-- repeate属性表示该任务执行时再次被触发是否可以再次执行 -->
		<property name="repeate" value="false"></property>
		<!-- multiNodeExecute属性表示该任务是否可以同时在多个节点执行 -->
		<property name="multiNodeExecute" value="false"></property>
		<!-- JobClass统一使用CommonJob -->
		<property name="jobClass" value="com.deppon.foss.framework.server.components.scheduling.CommonJob"></property>
		<property name="jobDataAsMap">
			<map>
				<!-- 任务中需要调用的服务类 -->
				<entry key="serviceBean" value-ref="timerPotentialCustomer"></entry>
				<!-- 任务中需要调用的服务方法 -->
				<entry key="methodName" value="timeNotDevpPlanAndSysmakeIsLose"></entry>
			</map>
		</property>
	</bean>
	<!-- 触发器，定义job触发的时间，还可以配置CronTriggerBean -->
	<bean id="timeNotDevpPlanAndSysmakeIsLoseTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="timeNotDevpPlanAndSysmakeIsLoseJob" />
		<property name="cronExpression">
			<value>0 0 0 1 * ?</value>
		</property>
	</bean>

</beans>
